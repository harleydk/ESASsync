<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Extensions.Logging;
using Synchronization.ESAS.DAL;
using Synchronization.ESAS.SyncDestinations;
using KellermanSoftware.CompareNetObjects;
using System.Data.Entity;
using esas.Dynamics.Models.Contracts;

/*
	Disse klasser er auto-genererede, på basis af deres korresponderende T4-template. 
	Hvis der skal rettes i klasserne, skal rettelserne foregå i template'n.
*/
namespace Synchronization.ESAS.Synchronizations.EsasStagingDbSyncStrategies
{
<#
Dictionary<string,string> entitiesDictionary = new Dictionary<string, string>();
entitiesDictionary.Add("Adgangskrav","esas_adgangskravId");
entitiesDictionary.Add("Afdeling","esas_afdelingId");
entitiesDictionary.Add("Afdelingsniveau","esas_afdelingsniveauId");
entitiesDictionary.Add("Afslagsbegrundelse","esas_afslagsbegrundelseId");
entitiesDictionary.Add("Aktivitetsudbud","esas_aktivitetsudbudId");
entitiesDictionary.Add("AndenAktivitet","esas_ansoegning_andre_aktiviteterid");
entitiesDictionary.Add("Ansoeger","LeadId");
entitiesDictionary.Add("Ansoegning","esas_ansoegningId");
entitiesDictionary.Add("Ansoegningshandling","esas_ansoegningshandlingId");
entitiesDictionary.Add("Ansoegningskort","esas_ansoegningskortid");
entitiesDictionary.Add("AnsoegningskortOpsaetning","esas_ansoegningskortopsaetningid");
entitiesDictionary.Add("AnsoegningskortTekst","esas_ansoegningskorttekstid");
entitiesDictionary.Add("Ansoegningsopsaetning","esas_ansoegningsopsaetningId");
entitiesDictionary.Add("Bedoemmelse","esas_bedoemmelseId");
entitiesDictionary.Add("Bedoemmelsesrunde","esas_bedoemmelsesrundeId");
//entitiesDictionary.Add("Bevisgrundlag","esas_bevisgrundlagId"); -- sløjfet, for now.
entitiesDictionary.Add("Bilag","esas_bilagid");
entitiesDictionary.Add("Branche","esas_brancheId");
entitiesDictionary.Add("Eksamenstype","esas_eksamenstypeId");
entitiesDictionary.Add("Enkeltfag","esas_ansoegning_enkeltfagid");
entitiesDictionary.Add("Erfaringer","esas_ansoegning_erfaringerid");
entitiesDictionary.Add("Fagpersonsrelation","esas_fagpersonsrelationId");
entitiesDictionary.Add("Fravaersaarsag","esas_fravaersaarsagId");
entitiesDictionary.Add("Gebyrtype","esas_gebyrtypeid");
entitiesDictionary.Add("GennemfoerelsesUddannelseselement","esas_uddannelseselement_gennemfoerelseId");
entitiesDictionary.Add("GymnasielleFagkrav","esas_gymnasielle_fagkravId");
entitiesDictionary.Add("GymnasielleKarakterkrav","esas_gymnasielle_karakterkravid");
entitiesDictionary.Add("Hold","esas_holdId");
entitiesDictionary.Add("Indskrivningsform","esas_indskrivningsformId");
entitiesDictionary.Add("InstitutionVirksomhed","AccountId");
entitiesDictionary.Add("Institutionsoplysninger","esas_institutionsoplysningerId");
entitiesDictionary.Add("Internationalisering","esas_internationaliseringId");
entitiesDictionary.Add("KOTGruppe","esas_kot_gruppeid");
entitiesDictionary.Add("KOTGruppeTilmelding","esas_kot_gruppe_tilmeldingid");
entitiesDictionary.Add("Karakter","esas_karakterId");
entitiesDictionary.Add("Kommunikation","esas_kommunikationId");
entitiesDictionary.Add("Kommune","esas_kommuneId");
entitiesDictionary.Add("KurserSkoleophold","esas_ansoegning_kurser_og_skoleopholdid");
entitiesDictionary.Add("Kvalifikationskriterie","esas_kvalifikationskriterieid");
entitiesDictionary.Add("Kvalifikationspoint","esas_kvalifikationspointid");
entitiesDictionary.Add("Land","esas_landId");
entitiesDictionary.Add("MeritRegistrering","esas_meritregistreringId");
entitiesDictionary.Add("NationalAfgangsaarsag","esas_national_afgangsaarsagId");
entitiesDictionary.Add("Omraadenummer","esas_omraadenummerId");
entitiesDictionary.Add("Omraadenummeropsaetning","esas_omraadeopsaetningid");
entitiesDictionary.Add("Omraadespecialisering","esas_omraadespecialiseringid");
entitiesDictionary.Add("OptionSetValueString","Id");
entitiesDictionary.Add("Person","ContactId");
entitiesDictionary.Add("Personoplysning","esas_personoplysningerId");
entitiesDictionary.Add("PlanlaegningsUddannelseselement","esas_uddannelseselement_planlaegningId");
entitiesDictionary.Add("Postnummer","esas_postnummerId");
entitiesDictionary.Add("Praktikomraade","esas_praktikomraadeId");
entitiesDictionary.Add("Praktikophold","esas_praktikopholdId");
entitiesDictionary.Add("Proeve","esas_ansoegning_proeveid");
entitiesDictionary.Add("Publicering","esas_publiceringid");
entitiesDictionary.Add("RelationsStatus","esas_relations_statusId");
entitiesDictionary.Add("Rekvirenttype","esas_rekvirenttypeId");
entitiesDictionary.Add("Samlaesning","esas_samlaesningId");
entitiesDictionary.Add("Specialisering","esas_ansoegning_specialiseringid");
entitiesDictionary.Add("StruktureltUddannelseselement","esas_uddannelseselementId");
entitiesDictionary.Add("Studieforloeb","esas_studieforloebId");
entitiesDictionary.Add("StudieinaktivPeriode","esas_studieinaktiv_periodeId");
entitiesDictionary.Add("SystemUser","SystemUserId");
entitiesDictionary.Add("Uddannelsesaktivitet","esas_uddannelsesaktivitetId");
entitiesDictionary.Add("Uddannelsesstruktur","esas_uddannelsesstrukturId");
entitiesDictionary.Add("UdlandsopholdAnsoegning","esas_ansoegning_udlandsopholdid");
entitiesDictionary.Add("VideregaaendeUddannelse","esas_ansoegning_videregaaende_uddannelseid");
            
  foreach (var entity in entitiesDictionary)
  {
#>
	// Denne klasse er auto-genereret. Enhver ændring vil blive overskrevet når auto-generingen kører på ny.
    public class <#=entity.Key#>EsasStagingDbDestination : IEsasStagingDbDestination
    {
		private ComparisonConfig cc = new ComparisonConfig();
        private CompareLogic compareLogic;
		private ILogger _logger;

		public <#=entity.Key#>EsasStagingDbDestination(ILogger logger)
		{
			_logger = logger;
		}

        public bool IsStrategyMatch(Type type)
        {
            if (type == typeof(<#=entity.Key#>))
                return true;

            return false;
        }

        public void Deliver(object[] objects, IEsasDbContextFactory dbContextFactory)
        {
			_logger.LogInformation("Klar til opdatering/tilføjelse af objekter.");
			System.Diagnostics.Debug.WriteLine("Delivering by " + this.GetType().Name);
			// initialize compare-logic
		    cc.CompareChildren = true; // tillader også sammenligning af objekter pakket i en System.Nullable
            cc.IgnoreObjectTypes = true; // ignorer objekt-type - fordi objekter fra Entity Frameworket får en 'dynamic' type, som ikke er sammenlignelig med kp.domain-typen.
            compareLogic = new CompareLogic(cc);

			List<<#=entity.Key#>> nyeObjekter = new List<<#=entity.Key#>>();
            int antalÆndredeObjekter = 0;

			var dbContext = dbContextFactory.CreateDbContext();
			using (dbContext)
			{
	            var existingEntities = dbContext.<#=entity.Key#>;
				int recordNo = 0;
			
				for( int i=0; i < objects.Length; i++)
	            {
					recordNo++;
					<#=entity.Key#> freshObject = (<#=entity.Key#>) objects[i];
	
					var existingObject = existingEntities.SingleOrDefault(x => x.<#=entity.Value #> == freshObject.<#=entity.Value #>);
					if (existingObject == null)
	                {
                        // tilføj til listen over nye objekter, som vi bulk-insert'er nedenfor
                        string newObjectMessage = $"Sync-delivery: new object (of type <#=entity.Key#>) with id {freshObject.<#=entity.Value #>}";
                        _logger.LogInformation(newObjectMessage);

	                    nyeObjekter.Add(freshObject);
	                }
	                else
	                {
	                    // update
                        ComparisonResult objectChangeResult = ObjectChangeResult(freshObject, existingObject);
                        bool objectHasChanged = !objectChangeResult.AreEqual;
                        if (objectHasChanged)
	                    {
                            string newObjectMessage = $"Sync-delivery: changed object (of type <#=entity.Key#>) {freshObject.<#=entity.Value #>}. Changes to '{objectChangeResult.DifferencesString}";
                            _logger.LogInformation(newObjectMessage);
                            try
 
                            {
                                 antalÆndredeObjekter += 1;
						        dbContext.Entry(existingObject).State = EntityState.Modified; // remember to keep the 'existingObject' tracked by EF - or we'll get an error as we try to update the existing navigational properties (with a null-value, from the 'freshObject').
	                            dbContext.Entry(existingObject).CurrentValues.SetValues(freshObject);
                                dbContext.SaveChanges();
                            }
                            catch( Exception ex)
                            {
                             _logger.LogError(ex.Message, ex);
                             throw ex; // kast den oprindelig exception for at forlade synkroniseringen. Ellers ville denne blive markeret som en succes, og timestamp'et vil blive mejslet i sten - og fortidige opdateringer vil blive skippet, dersom der er et nyere timestamp at tage i betragtning.
                            }
                           
	                    }
	                }
	
					// if ( recordNo % 1000 == 0)
                    // {
					//   System.Diagnostics.Debug.WriteLine(recordNo);
                    //   dbContext.SaveChanges();
                    // }
	            }

				// dbContext.SaveChanges();
            }

			if (nyeObjekter.Any())
            {
                _logger.LogInformation($"Fandt {nyeObjekter.Count()} til indsættelse.");
                try
                {
                    using (var context = new EsasDbContextFactory().CreateDbContext())
                    {
                            context.<#=entity.Key#>.AddRange(nyeObjekter);
                            context.SaveChanges();
                    }
                }
                catch (Exception ex) when (ex.InnerException.Message.StartsWith("An error occurred while updating the entries. See the inner exception for details."))
                {
                    _logger.LogError("Der opstod en fejl i.f.m. tilføjelsen af samtlige nye objekter. Denne fejl skyldes sandsynligvis dét at en reference ikke kunne opfyldes, eksempelvis som ved indsættelse af en GUE der refererer til et ikke-eksisterende studieforløb. Vil i stedet gennemløbe hver enkelt record, og indsætte disse enkeltvis.");

                    _logger.LogInformation("Indsætter records enkelt-vis.");
                    using (var context = new EsasDbContextFactory().CreateDbContext())
                    {
                        context.Configuration.AutoDetectChangesEnabled = false; // just adding, no need to track'em.
                        for (int i = 0; i < nyeObjekter.Count(); i++)
                        {
                            var nytObjekt = nyeObjekter[i];

                            _logger.LogInformation($"Indsætter objekt med id '{nyeObjekter[i].<#=entity.Value #>.ToString()}'");
                            try
                            {
                                context.<#=entity.Key#>.Add(nytObjekt);
                                context.SaveChanges();
                                _logger.LogInformation($"Objekt med id '{nytObjekt.<#=entity.Value #>.ToString()}' blev indsat.");
                            }
                            catch (Exception exe) when (exe.InnerException.Message.StartsWith("An error occurred while updating the entries. See the inner exception for details."))
                            {
                                string relationExceptionMessage = exe.InnerException.InnerException.Message;
                                _logger.LogError($"Objekt med id '{ nytObjekt.<#=entity.Value #>.ToString()}' kunne ikke indsættes pga. dårlige db-relationer ('{relationExceptionMessage}'). Springer videre til næste.");
                                //detach the entry, or EF will try and add it again. And again. 
                                context.Entry(nytObjekt).State = EntityState.Detached;
                                continue;
                            }
                            catch (Exception excep)
                            {
                                _logger.LogError($"Objekt med id '{ nytObjekt.<#=entity.Value #>.ToString()}' kunne ikke indsættes pga. '{ excep.Message }'. Springer videre til næste.");
                                //detach the entry, or EF will try and add it again. And again. 
                                context.Entry(nytObjekt).State = EntityState.Detached;
                                continue;
                            }
                        }
                    }

                    
                    _logger.LogError(ex.Message, ex);
                    throw ex; // kast den oprindelig exception for at forlade synkroniseringen. Ellers ville denne blive markeret som en succes, og timestamp'et vil blive mejslet i sten - og fortidige opdateringer vil blive skippet, dersom der er et nyere timestamp at tage i betragtning.
                }
            }

            _logger.LogInformation("Antal nye objekter: " + nyeObjekter.Count());
            _logger.LogInformation("Antal ændrede objekter: " + antalÆndredeObjekter);
		}

        private ComparisonResult ObjectChangeResult(object freshObject, object existingObject)
        {
            var a = freshObject as <#=entity.Key#>;
            var b = existingObject as <#=entity.Key#>;
            
            ComparisonResult resul = compareLogic.Compare(a, b);
            return resul;
        }
    }

<#
  } // foreach end
#>

} // namespace end
