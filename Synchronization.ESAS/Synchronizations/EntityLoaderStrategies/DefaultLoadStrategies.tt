<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
using Default; // Unchase OData connected service 'default' container name
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Extensions.Logging;
using System.IO;
using System.Diagnostics;
using Newtonsoft.Json;
using esas.Dynamics.Models.Contracts;
using Synchronization.ESAS.DAL;

/*
	Disse klasser er auto-genererede, på basis af deres korresponderende T4-template. 
	Hvis der skal rettes i klasserne, skal rettelserne foregå i template'n!
*/
namespace Synchronization.ESAS.Synchronizations.EntityLoaderStrategies
{
<#
	 string[] entityNames = new string[] {
"Adgangskrav",
"Afdeling",
"Afdelingsniveau",
"Afslagsbegrundelse",
"Aktivitetsudbud",
"AndenAktivitet",
"Ansoeger",
"Ansoegning",
"Ansoegningshandling",
"Ansoegningskort",
"AnsoegningskortOpsaetning",
"AnsoegningskortTekst",
"Ansoegningsopsaetning",
"Bedoemmelse",
"Bedoemmelsesrunde",
"Bevisgrundlag",
"Bilag",
"Branche",
"Eksamenstype",
"Enkeltfag",
"Erfaringer",
"Fagpersonsrelation",
"Fravaersaarsag",
"Gebyrtype",
"GennemfoerelsesUddannelseselement",
"GymnasielleFagkrav",
"GymnasielleKarakterkrav",
"Hold",
"Indskrivningsform",
"InstitutionVirksomhed",
"Institutionsoplysninger",
"Internationalisering",
"KOTGruppe",
"KOTGruppeTilmelding",
"Karakter",
"Kommunikation",
"Kommune",
"KurserSkoleophold",
"Kvalifikationskriterie",
"Kvalifikationspoint",
"Land",
"MeritRegistrering",
"NationalAfgangsaarsag",
"Omraadenummer",
"Omraadenummeropsaetning",
"Omraadespecialisering",
"Person",
"Personoplysning",
"PlanlaegningsUddannelseselement",
"Postnummer",
"Praktikomraade",
"Praktikophold",
"Proeve",
"Publicering",
"RelationsStatus",
"Rekvirenttype",
"Specialisering",
"Samlaesning",
"StruktureltUddannelseselement",
"Studieforloeb",
"StudieinaktivPeriode",
"SystemUser",
"Uddannelsesaktivitet",
"Uddannelsesstruktur",
"UdlandsopholdAnsoegning",
"VideregaaendeUddannelse"

};
            //https://github.com/StevenGilligan/AutoCompare
  foreach (string entityName in entityNames)
  {
#>
	// Denne klasse er auto-genereret. Enhver ændring vil blive overskrevet når auto-generingen kører på ny.
    public class <#=entityName#>LoadStrategy : BaseLoadStrategy
    {
         public <#=entityName#>LoadStrategy(EsasWsContextFactory esasWebServiceContextFactory, ILoadTimeStrategy loadTimeStrategy, ILogger logger) 
			: base(esasWebServiceContextFactory, loadTimeStrategy, logger)
        {
        }

        protected override object[] LoadObjects(DateTime loadTimeCutoff)
        {
            var esasContainer = _esasWebServiceContextFactory.Create();
            // design continuation here
            List<<#=entityName#>> loadedObjectsListe = new List<<#=entityName#>>();
            Microsoft.OData.Client.DataServiceQueryContinuation<<#=entityName#>> token = null;

            string datetimeoffSetFromLoadtimeCutOff = loadTimeCutoff.ToString("yyyy-MM-ddTHH:mm:ssZ");
            var response = esasContainer.<#=entityName#>.AddQueryOption("$filter", $"ModifiedOn gt {datetimeoffSetFromLoadtimeCutOff}").Execute() as Microsoft.OData.Client.QueryOperationResponse<<#=entityName#>>;

            loadedObjectsListe.AddRange(response.ToList());
            if ( ! loadedObjectsListe.Any())
                return null;
            
            while ((token = response.GetContinuation()) != null)
            {
                System.Diagnostics.Debug.WriteLine("Continuation-token available, retrieving next batch.");
                esasContainer = _esasWebServiceContextFactory.Create();
                response = esasContainer.Execute<<#=entityName#>>(token.NextLinkUri) as Microsoft.OData.Client.QueryOperationResponse<<#=entityName#>>;
                loadedObjectsListe.AddRange(response.ToList());
            }

            return loadedObjectsListe.ToArray();
        }

        /// <summary>
        /// This method is only used for initial load of ESAS data - will become useless once we're in production.
        /// </summary>
        protected override object[] LoadObjectsAndPersistToDisk()
        {
            int i = 0; int j = 0;
            var esasContainer = _esasWebServiceContextFactory.Create();

            List<<#=entityName#>> loadedObjectsListe = new List<<#=entityName#>>();
            Microsoft.OData.Client.DataServiceQueryContinuation<<#=entityName#>> token = null;

            var response = esasContainer.<#=entityName#>.Execute() as Microsoft.OData.Client.QueryOperationResponse<<#=entityName#>>;
            loadedObjectsListe.AddRange(response.ToList());
            if ( loadedObjectsListe.Any())
            {
                j = loadedObjectsListe.Count();
                PersistToFile(i,j,ref loadedObjectsListe);
            }
            else
                return null;
            
            System.Diagnostics.Debug.WriteLine(loadedObjectsListe.Count());
         
            while ((token = response.GetContinuation()) != null)
            {
               Stopwatch st = new Stopwatch();
                st.Start();
                       esasContainer = _esasWebServiceContextFactory.Create();
                List<<#=entityName#>> loadedObjectsListen = new List<<#=entityName#>>();
                response = esasContainer.Execute<<#=entityName#>>(token.NextLinkUri) as Microsoft.OData.Client.QueryOperationResponse<<#=entityName#>>;
                loadedObjectsListen.AddRange(response.ToList());
                if ( loadedObjectsListen.Any())
            {
                i = j;
                j = j + loadedObjectsListen.Count();
                PersistToFile(i,j,ref loadedObjectsListen);
                loadedObjectsListen = null;
            }


                // loadedObjectsListe.AddRange(response.ToList()); - only persist to disc, for now.
               st.Stop();
               System.Diagnostics.Debug.WriteLine(j + "-" + st.Elapsed.Seconds);
            }
            
             System.Diagnostics.Debug.WriteLine($"*** total objects written to disk was {j} ***");
            //return loadedObjectsListe.ToArray();
            return null;
        }

        
        private void PersistToFile(int indexToStartLoadFrom, int howManyRecordsToGet, ref List<<#=entityName#>> loadedObjectsListe)
        {
             string entityName = "<#=entityName#>";
              if (!Directory.Exists($@"E:\ESAS_prod_fileBackupsAfPPdataUge8\{entityName}"))
                Directory.CreateDirectory($@"E:\ESAS_prod_fileBackupsAfPPdataUge8\{entityName}");

            string objectsJson = JsonConvert.SerializeObject(loadedObjectsListe, Formatting.Indented);
            if ( !File.Exists($@"E:\ESAS_prod_fileBackupsAfPPdataUge8\{entityName}\{entityName}{indexToStartLoadFrom.ToString()}-{howManyRecordsToGet.ToString()}.json"))
                File.WriteAllText($@"E:\ESAS_prod_fileBackupsAfPPdataUge8\{entityName}\{entityName}{indexToStartLoadFrom.ToString()}-{howManyRecordsToGet.ToString()}.json", objectsJson );

        }


    }


<#
  } // foreach end
#>

} // namespace end